#!/usr/bin/ruby

# A bit messy... allows (clean up to come)
# 1 - Connect to a remote machine (SINGLE machine)
# 2 - SCP files to/from a set of machines (MULTIPLE machines)
# 3 - Run in line command on a set of machines (MULTIPLE machines)
# 4 - Run script on a set of machines (MULTIPLE machines)

require 'optparse'
require 'pp'


# Sent of aliased machines being addressed
end_points = ARGV[0] ? ARGV[0].split(":") : nil

# The command to be executed remotely
command = ARGV[1]

@config_path = ENV["HOME"] + "/.connect2"

def escape_quotes(str)
   return str.gsub("\"", "\\\"")
end

def run_command cmd
   puts "Calling #{cmd}"
   process = IO.popen(cmd)
   process.sync = true
   process.each { |s| print s }
end

def write_config machines
    machines_as_str = PP.pp(machines, '')
    File.open(@config_path, 'w') { |file| file.write(machines_as_str) }
end

if !File.file?(@config_path) then
    write_config({})
end
   
@machines = eval(File.read(@config_path))

def help
     @machines.each do |key, value|
       puts "#{key} => ssh #{value[:host]} -p #{value[:port]}"
     end
end

unless end_points then
        STDERR.put "No hosts specified"
	help
	exit
end

options = {}
op = OptionParser.new do |opts|
   opts.on("-c", "--scp", "scp") do | scp |
     options[:scp] = scp
   end
   opts.on("-r", "--recursive", "SCP recursive") do | arg |
     options[:r] = arg
   end
   opts.on("-a", "--action [action]", "Action (post or get)") do | arg |
     options[:action] = arg
   end
   opts.on("-l", "--localpath [localpath]", "Path to local file or directory") do | arg |
     options[:localpath] = arg
   end
   opts.on("-s", "--serverpath [serverpath]", "Path to remote file or directory") do | arg |
     options[:remotepath] = arg
   end
   opts.on("-p", "--path_to_script [scipt_path]",
	            "Script to execute remotely") do | script |
	             options[:script] = script
   end

   opts.on_tail("-h", "--help", "Show this message") do
     puts "End points are\n"
     help
     puts opts
     exit			 
  end
end.parse!

if options[:scp] then
   # Transfer file to/from remote machine
   end_points.each do | end_point |
     connect_to = @machines[end_point]
     puts "host: #{connect_to[:host]}"
     puts "Top of scp"
     recurive_opt = options[:r] ? " -r" : ""
     remote = "#{connect_to[:host]}:\"#{options[:remotepath]}\""
     command = nil
     scp = "scp#{recurive_opt} -P #{connect_to[:port]}"
     if options[:action] == "get" then
	     command = "#{scp} #{remote} \"#{options[:localpath]}\""
     elsif options[:action] == "post" then
	     command = "#{scp} \"#{options[:localpath]}\" #{remote}"
     else
        puts "Missing or invalid scp action"
        exit
     end
     puts "Running #{command}"
     run_command(command)
   end
elsif !command then
   # Connect to machine
   connect_to = @machines[end_points[0]]
   unless connect_to then
     puts "Could not locate #{end_points[0]}"
     help()
     exit
   end
   puts "Connection to #{connect_to[:host]}"
   command = "ssh #{connect_to[:host]} -p #{connect_to[:port]}"
   puts "Running: #{command}"
   exec(command)
elsif options[:script] then
   end_points.each do | machine |
      connect_to = @machines[machine] 
      puts " X Running script #{options[:script]} on #{machine}"
      File.readlines(options[:script]).each do | line |
        if !line.empty? then
command=<<mark
ssh #{connect_to[:host]} -p #{connect_to[:port]} "source .bashrc; #{escape_quotes(line.strip())}"
mark
          run_command(command)
	end
      end
   end

else
   # Run command remotely
   end_points.each do | end_point |
     connect_to = @machines[end_point]
     cmd = "ssh #{connect_to[:host]} -p #{connect_to[:port]} 'source .bashrc; #{command}' "
     puts "Runnig #{cmd}"
     run_command(cmd)
   end
end
