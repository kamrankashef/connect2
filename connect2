#!/usr/bin/ruby

# Author: Kamran Kashef
# URL: https://github.com/kamrankashef/connect2
# 
# Allows:
#   1 - Connect to a remote machine (SINGLE machine)
#   2 - SCP files to/from a set of machines (MULTIPLE machines)
#   3 - Run in line command on a set of machines (MULTIPLE machines)
#   4 - Run script on a set of machines (MULTIPLE machines)
#   5 - Interactive configuration
#   
#  For help run: ./connect2 -h

require 'optparse'
require 'pp'

@config_path = ENV["HOME"] + "/.connect2"

def escape_quotes(str)
  return str.gsub("\"", "\\\"")
end

def run_command cmd
  process = IO.popen(cmd)
  process.sync = true
  process.each { |s| print s }
end

def write_config config
  config_as_str = PP.pp(config, '', 80)
  File.open(@config_path, 'w') { |file| file.write(config_as_str) }
  source_config()
end

def source_config
  @config = eval(File.read(@config_path))
  @machines = @config[:machines].sort_by { | entry | entry[:alias] }
  @config[:machines] = @machines
end

def add_alias (aliaz, user_name, host, port)
  entry = {:alias => aliaz, :host => "#{user_name}@#{host}", :port => port}
  @config[:machines] << entry
  write_config(@config)
  return entry
end

def prompt_for_machines
  @machines.each_with_index { | machine, index | 
    STDOUT.puts "[#{index + 1}] #{machine[:alias]} => #{machine[:host]}:#{machine[:port]}"
  }
  while true do
    print "Select your host(s): "
    user_input = gets.chop
    selection_indexes = user_input.split(/[^\d+]/).reject { |s| s.empty? }.collect { | str | str.to_i - 1}.sort
    if user_input.empty? then
      next
    elsif selection_indexes.empty? or selection_indexes.min < 0 or selection_indexes.max > @machines.size then
      puts "Invalid selection."
      next
    end 
    return @machines.values_at(*selection_indexes)
  end
end

def prompt_to_add
  print "Alias Name: "
  aliaz = gets.chop
  print "User Name: "
  user_name = gets.chop
  print "Host: "
  host = gets.chop
  print "Port: "
  port = gets.chop
  if @config[:machines].any? { | machine | machine[:alias] === aliaz } then
    STDERR.puts "Error: Duplicate alias '#{aliaz}'."
  else
    entry = add_alias(aliaz, user_name, host, port)
    puts "Added: #{entry}"
  end
end


if !File.file?(@config_path) then
  write_config({:machines => []})
end
   
source_config()

if @machines.empty? then
  puts "No config found, create new machine alias"
  prompt_to_add
  exit
end

options = {}
op = OptionParser.new do |opts|
  opts.on("-c", "--command [command_to_run]", "command") do | command |
    options[:command] = command
  end
  opts.on("-t", "--scp", "Transfer file (SCP)") do | scp |
    options[:scp] = scp
  end
  opts.on("-r", "--recursive", "SCP recursive") do | arg |
    options[:r] = arg
  end
  opts.on("-a", "--action [action]", "Action (post or get)") do | arg |
    options[:action] = arg
  end
  opts.on("-l", "--localpath [localpath]", "Path to local file or directory") do | arg |
    options[:localpath] = arg
  end
  opts.on("-s", "--serverpath [serverpath]", "Path to remote file or directory") do | arg |
    options[:remotepath] = arg
  end
  opts.on("-p", "--path_to_script [scipt_path]",
    "Script to execute remotely") do | script |
    options[:script] = script
  end
  opts.on("-m", "--machines [':' sperated list machine aliases]", "Machine aliases to connect to") do | arg |
    options[:aliases] = arg
  end

  opts.on("--configure", "Configure host aliases") do | arg |
    ARGV.clear
    while true do 
      print "Add, delete or quit entry? [a,d,q]: "
      operation = gets.chop
      case operation[0]
      when 'a'
        prompt_to_add
      when 'd'
        selected = prompt_for_machines
        puts "Deleting:"
        pp selected
        @config[:machines].delete_if { | elem |
          selected.any? { | s | elem[:alias] === s[:alias] }
        }
        write_config(@config)
      when 'q'
        exit
      end
    end
    exit
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit		 
  end
end

begin op.parse!
rescue OptionParser::InvalidOption => e
  puts e
  puts op
  exit 1
end

ARGV.clear

# Sent of aliased machines being addressed
end_points = options[:aliases] ? options[:aliases].split(":") : nil

# If none provided, prompt for machines to connect to
if end_points then
  selected_machines = @machines.select { | machine | end_points.index(machine[:alias]) }
  if selected_machines.empty? then
    puts "Unknown hosts #{end_points}, exiting."
    exit
  end
else
  puts "No end point specified"
  selected_machines = prompt_for_machines()
end

if options[:scp] then
  # Transfer file to/from remote machine
  selected_machines.each do | connect_to |
    recurive_opt = options[:r] ? " -r" : ""
    remote = "#{connect_to[:host]}:\"#{options[:remotepath]}\""
    command = nil
    scp = "scp#{recurive_opt} -P #{connect_to[:port]}"
    if options[:action] == "get" then
      command = "#{scp} #{remote} \"#{options[:localpath]}\""
    elsif options[:action] == "post" then
      command = "#{scp} \"#{options[:localpath]}\" #{remote}"
    else
      puts "Missing or invalid scp action"
      exit
    end
    puts "Running: #{command}"
    run_command(command)
  end
elsif options[:script] then
  # Execute script remotely
  selected_machines.each do | connect_to |
    puts "Running script '#{options[:script]}' on #{connect_to[:alias]}"
    File.readlines(options[:script]).each do | line |
      if !line.empty? then
        command=<<mark
ssh #{connect_to[:host]} -p #{connect_to[:port]} "source .bashrc; #{escape_quotes(line.strip())}"
mark
        run_command(command)
      end
    end
  end
elsif !options[:command] then
  # Connect to machine
  connect_to = selected_machines[0]
  puts "Connection to #{connect_to[:host]}"
  command = "ssh #{connect_to[:host]} -p #{connect_to[:port]}"
  puts "Running: #{command}"
  exec(command)
else
  # Run command remotely
  selected_machines.each do | connect_to |
    cmd = "ssh #{connect_to[:host]} -p #{connect_to[:port]} 'source .bashrc; #{options[:command]}' "
    puts "Running #{cmd}"
    run_command(cmd)
  end
end
